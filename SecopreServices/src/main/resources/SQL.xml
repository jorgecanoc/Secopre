<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<bean id="queryContainer" class="ideasw.secopre.sql.QueryContainer">
		<property name="queries">
			<props>

				<prop key="UPDATE_UPLOADED_FILE_IN_REQUEST">
					<![CDATA[
						UPDATE secopre.REQUEST
						SET RESOURCE_PATH = :uploadedFilePath
						WHERE ID = :requestId
					]]>
				</prop>	
						
				<prop key="CLEAN_REQUEST_DETAIL">
					<![CDATA[
						DELETE FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = :requestId
					]]>
				</prop>	
						
				<prop key="GET_FORMALITY_FROM_USER_ID">
					<![CDATA[
						SELECT DISTINCT (T.ID) AS FORMALITY_ID, T.F_DESC AS DESCRIPTION, T.WORKFLOW_ID, T.AUTHORIZATION_ID, T.CODE FROM (
							SELECT F.ID,
								   F.DESCRIPTION F_DESC,
								   F.WORKFLOW_ID,
								   F.AUTHORIZATION_ID,
								   F.CODE,
								   W.DESCRIPTION WF_DESC,
								   W.FIRST_STAGE_CFG,
								   SCR.ROLE_ID,
								   R.ROLENAME
							  FROM secopre.FORMALITY F,
							  	   secopre.WORKFLOW W,
							  	   secopre.STAGE_CONFIG_ROLE SCR,
							  	   secopre.ROLE R,
							  	   secopre.USER_ROLE UR
							 WHERE F.WORKFLOW_ID = W.ID
							   AND W.FIRST_STAGE_CFG = SCR.STAGE_CONFIG_ID
							   AND SCR.ROLE_ID = R.ID
							   AND R.ID = UR.ROLE_ID
							   AND UR.USER_ID = :userId
							) T
					]]>
				</prop>	
				
				<prop key="GET_REQUEST_NEXT_CONSECUTIVE">
					<![CDATA[
						SELECT IFNULL( (MAX(id) + 1), 1) as CONSECUTIVE FROM secopre.REQUEST;
					]]>
				</prop>
				
				<prop key="GET_FORMALITY_BY_ID">
					<![CDATA[
						SELECT ID AS FORMALITY_ID,
							   DESCRIPTION,
							   WORKFLOW_ID,
							   LAST_UPDATE,
							   ACTIVE, 
							   AUTHORIZATION_ID,
							   CODE
					      FROM secopre.FORMALITY WHERE ID = :formalityId
					]]>
				</prop>		
				
				<prop key="INSERT_REQUEST_CONFIG">
					<![CDATA[
						INSERT INTO secopre.REQUEST_CONFIG
						(REQUEST_ID, FORMALITY_ID, WORKFLOW_ID, LAST_UPDATE, ACTIVE, AUTHORIZATION_ID)
						VALUES
						(:requestId, :formalityId, :workFlowId, SYSDATE(), 1, :authorizationId)
					]]>
				</prop>	
			
				<prop key="GET_NEXT_CONSECUTIVE">
					<![CDATA[
						SELECT (IFNULL(MAX(CONSECUTIVE), 0) + 1) AS CONSECUTIVE
  						  FROM secopre.REQUEST_HISTORY
 						 WHERE REQUEST_ID = :requestId
					]]>
				</prop>	
	
				<prop key="GET_REQUEST_FIRST_WORKFLOW_CONFIG">
					<![CDATA[
						 SELECT WC.*
						   FROM secopre.WORKFLOW_CONFIG WC,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.WORKFLOW W
						  WHERE RC.REQUEST_ID = :requestId
						    AND WC.WF_CFG_CODE = :wfConfigCode
						    AND WC.WORKFLOW_ID = RC.WORKFLOW_ID
						    AND RC.WORKFLOW_ID = W.ID
						    AND WC.STAGE_CONFIG_ID = W.FIRST_STAGE_CFG
					]]>
				</prop>
				
				<prop key="INSERT_REQUEST_HISTORY">
					<![CDATA[
						 INSERT INTO secopre.REQUEST_HISTORY
						 (REQUEST_ID, CONSECUTIVE, WORKFLOW_CONFIG_ID, USER_ID, LAST_UPDATE, ACTIVE, COMMENTS)
						 VALUES
						 (:requestId, :consecutive, :workFlowConfigId, :userId, SYSDATE(), 1, :comments)
					]]>
				</prop>
				
				<prop key="GET_FORMALITY_INBOX">
					<![CDATA[
						SELECT DISTINCT R.ID,
						 		R.FOLIO FOLIO,
						 		R.JUSTIFICATION,
						 		R.RESOURCE_PATH,
						 		DIST.ID DISTRICT,
						 		CONCAT("DTO-",DIST.NUMBER) DISTRICT_DESCRIPTION,
						 		RC.FORMALITY_ID,
						 		F.DESCRIPTION FORMALITY_DESCRIPTION,
						 		RH.WORKFLOW_CONFIG_ID,
						 		WC.STAGE_CONFIG_ID,
						 		(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) AS TOTAL_AMOUNT,
						 		(SELECT LAST_UPDATE FROM secopre.REQUEST_HISTORY WHERE CONSECUTIVE = 1 AND REQUEST_ID = R.ID) AS CREATION_DATE,
						 		ST.DESCRIPTION,
						 		WC.NEXT_STAGE_CONFIG,
						 		SC.PATH_ID,
						 		P.URL,
						 		SC.IS_CAPTURE,
						 		SC.IS_AUTHORIZATION,
						 		(CASE WHEN((SC.IS_CANCELED) OR (SC.IS_OPERATED))
						 		   THEN 1 
						 		   ELSE 0 
						 		END) AS IS_END_WORKFLOW,
						 		ifnull(SC.CAPTURE_FORM,"") CAPTURE_FORM,
						 		WC.STATUS_ID,
						 		S.DESCRIPTION NEXT_DESCRIPTION
						   FROM secopre.REQUEST R,
						   		secopre.REQUEST_HISTORY RH,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.FORMALITY F,
						   		secopre.WORKFLOW_CONFIG WC,
						   		secopre.STAGE_CONFIG SC0,
						   		secopre.STAGE_CONFIG SC,
						   		secopre.PATH P,
						   		secopre.STATUS S,
						   		secopre.STAGE_CONFIG_ROLE SCR,
						   		secopre.USER_ROLE UR,
						   		secopre.USER U,
						   		secopre.STAGE ST,
						   		secopre.DISTRICT DIST
						  WHERE R.ID = RH.REQUEST_ID
						    AND RH.ACTIVE = 1
						    AND R.ID = RC.REQUEST_ID
						    AND RC.FORMALITY_ID = F.ID
						    AND RH.WORKFLOW_CONFIG_ID = WC.ID
						    AND WC.ACTIVE = 1
						    AND WC.NEXT_STAGE_CONFIG = SC.ID
						    AND WC.STAGE_CONFIG_ID = SC0.ID
						    AND SC0.STAGE_ID = ST.ID
						    AND SC.PATH_ID = P.ID
						    AND WC.STATUS_ID = S.ID
						    AND SC.ID = SCR.STAGE_CONFIG_ID
						    AND (SCR.ROLE_ID = UR.ROLE_ID OR SCR.ROLE_ID = -1)
						    AND UR.USER_ID = U.ID
						    AND R.DISTRICT_ID = DIST.ID
						    AND U.ID = :userId
						    ORDER BY RH.LAST_UPDATE DESC
					]]>
				</prop>
				
				<prop key="GET_REQUEST_WORKFLOW_CONFIG">
					<![CDATA[
						 SELECT WC.*
						   FROM secopre.WORKFLOW_CONFIG WC,
						   		secopre.REQUEST_CONFIG RC
						  WHERE RC.REQUEST_ID = :requestId
						    AND WC.WF_CFG_CODE = :wfConfigCode
						    AND WC.WORKFLOW_ID = RC.WORKFLOW_ID
						    AND WC.STAGE_CONFIG_ID = :stageConfigId
					]]>
				</prop>
				
				<prop key="INACTIVATE_ACTIVE_STAGE">
					<![CDATA[
						 UPDATE secopre.REQUEST_HISTORY
						    SET ACTIVE = 0
						  WHERE REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="GET_REQUEST_BY_ID">
					<![CDATA[
						SELECT R.ID AS REQUEST_ID,
							   R.FOLIO,
							   R.DISTRICT_ID,
							   R.JUSTIFICATION,
							   R.RESOURCE_PATH,
							   R.MOVEMENT_TYPE_ID,
							   R.CERTIFIED_ACCOUNT
						  FROM secopre.REQUEST R
						 WHERE R.ID = :requestId
					]]>
				</prop>
				
				<prop key="INSERT_OR_UPDATE_REQUEST">
					<![CDATA[
						INSERT INTO secopre.REQUEST
						(ID, FOLIO, DISTRICT_ID, JUSTIFICATION, RESOURCE_PATH, MOVEMENT_TYPE_ID, LAST_UPDATE, ACTIVE, CERTIFIED_ACCOUNT)
						VALUES
						(:requestId, :folio, :districtId, :justification, :resourcePath, :movementTypeId,  SYSDATE(), 1, :certifiedAccount)
						ON DUPLICATE KEY UPDATE RESOURCE_PATH = VALUES(RESOURCE_PATH),
												MOVEMENT_TYPE_ID = VALUES(MOVEMENT_TYPE_ID),
												CERTIFIED_ACCOUNT = VALUES(CERTIFIED_ACCOUNT)
					]]>
				</prop>

				<prop key="INSERT_REQUEST_DETAIL">
					<![CDATA[
						INSERT INTO secopre.REQUEST_DETAIL
						(id, REQUEST_ID, MOVEMENT_TYPE_ID, PROGRAMATIC_KEY_ID, ENTRY_ID, INITIAL_MONTH, FINAL_MONTH, MONTH_AMOUNT, TOTAL_AMOUNT, CREATION_DATE, ACTIVE)
						VALUES
						(:requestDetailId, :requestId, :movementTypeId, :programaticKeyId, :entryId, :initialMonth, :finalMonth, :monthAmount, :totalAmount, sysdate(), 1)
					]]>
				</prop>

				<prop key="UPDATE_REQUEST_DETAIL">
					<![CDATA[
						UPDATE secopre.REQUEST_DETAIL
						SET PROGRAMATIC_KEY_ID = :programaticKeyId,
							ENTRY_ID = :entryId,
							INITIAL_MONTH = :initialMonth,
							FINAL_MONTH = :finalMonth,
							MONTH_AMOUNT = :monthAmount,
							TOTAL_AMOUNT = :totalAmount,
							LAST_UPDATE = SYSDATE()
						where id = :requestDetailId
					]]>
				</prop>

				<prop key="GET_REQUEST_DETAIL">
					<![CDATA[
						SELECT * FROM secopre.REQUEST_DETAIL
						where REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="INSERT_OR_UPDATE_REQUEST_DETAIL">
					<![CDATA[
						INSERT INTO secopre.REQUEST_DETAIL
						(id, REQUEST_ID, MOVEMENT_TYPE_ID, PROGRAMATIC_KEY_ID, ENTRY_ID, INITIAL_MONTH, FINAL_MONTH, MONTH_AMOUNT, TOTAL_AMOUNT, CREATION_DATE, ACTIVE)
						VALUES
						(:requestDetailId, :requestId, :movementTypeId, :programaticKeyId, :entryId, :initialMonth, :finalMonth, :monthAmount, :totalAmount, sysdate(), 1)
						ON DUPLICATE KEY UPDATE 
							PROGRAMATIC_KEY_ID = VALUES(PROGRAMATIC_KEY_ID),
							ENTRY_ID = VALUES(ENTRY_ID),
							INITIAL_MONTH = VALUES(INITIAL_MONTH),
							FINAL_MONTH = VALUES(FINAL_MONTH),
							MONTH_AMOUNT = VALUES(MONTH_AMOUNT),
							TOTAL_AMOUNT = VALUES(TOTAL_AMOUNT),
							LAST_UPDATE = SYSDATE()
					]]>
				</prop>
				
				<prop key="GET_REQUEST_CONFIG_BY_ID">
					<![CDATA[
						SELECT *
						  FROM secopre.REQUEST_CONFIG
						 WHERE REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="CAN_USER_AUTHORIZE">
					<![CDATA[
					SELECT COUNT(*) AS CAN_AUTHORIZE 
					  FROM secopre.AUTHORIZATION_CONFIG AC,
					  	   secopre.REL_USER_EMPLOYMENT RUE
					 WHERE AC.AUTHORIZATION_ID = :authorizationId
					   AND AC.STAGE_CONFIG_ID = :stageConfigId
					   AND AC.EMPLOYMENT_ID = RUE.EMPLOYMENT_ID
					   AND RUE.USER_ID = :userId		
					]]>
				</prop>
				
				<prop key="IS_USER_AUTHORIZATION_SUPERUSER">
					<![CDATA[
						SELECT COUNT(*) AS IS_SUPER_USER
						  FROM secopre.AUTHORIZATION A,
						  	   secopre.USER_ROLE UR
						 WHERE A.ID = :authorizationId
						   AND A.SUPER_USER_ROLE = UR.ROLE_ID
						   AND UR.USER_ID = :userId	
					]]>
				</prop>
				
				<prop key="HAS_MORE_SIGNATURES">
					<![CDATA[
						SELECT COUNT(*) HAS_MORE_SIGNATURE 
						  FROM secopre.WORKFLOW_CONFIG WC,
						  	   secopre.REQUEST_CONFIG RC
						 WHERE WC.WORKFLOW_ID = RC.WORKFLOW_ID
						   AND RC.REQUEST_ID = :requestId
						   AND WC.STAGE_CONFIG_ID = :stageConfigId
						   AND WC.WF_CFG_CODE = 'SIGFIRMA'
					]]>
				</prop>
				
				<prop key="GET_REQUEST_HISTORY">
					<![CDATA[
						SELECT H.REQUEST_ID,
							   H.CONSECUTIVE,
							   S1.DESCRIPTION ETAPA_INICiAL,
							   S2.DESCRIPTION SIGUIENTE_ETAPA,
							   S.DESCRIPTION ESTATUS,
							   H.LAST_UPDATE FECHA_CREACION,
							   H.COMMENTS,
							   U.USERNAME
						FROM secopre.REQUEST_HISTORY H,
							 secopre.WORKFLOW_CONFIG W,
							 secopre.STAGE_CONFIG SC1,
							 secopre.STAGE_CONFIG SC2,
							 secopre.STAGE S1,
							 secopre.STAGE S2,
							 secopre.STATUS S,
							 secopre.USER U
						where H.REQUEST_ID = :requestId
						AND H.WORKFLOW_CONFIG_ID = W.ID
						AND W.STAGE_CONFIG_ID = SC1.ID
						AND W.NEXT_STAGE_CONFIG = SC2.ID
						AND SC1.STAGE_ID = S1.ID
						AND SC2.STAGE_ID = S2.ID
						AND W.STATUS_ID = S.ID
						AND H.USER_ID = U.ID
					]]>
				</prop>
	
				<prop key="GET_VALID_ENTRIES">
					<![CDATA[
						SELECT E.ID, E.NAME 
						  FROM secopre.ENTRY E
						  JOIN (SELECT DISTINCT DISTRICT_ID, ENTRY_ID 
						          FROM secopre.ENTRYDISTRICT ED 
						         WHERE ED.DISTRICT_ID = :districtId ) T
						    ON E.ID = T.ENTRY_ID
						   AND E.PROGRAMMATIC_ID = :programaticKeyId
					]]>
				</prop>
				
				<prop key="GET_STAGE_CONFIG_BY_ID">
					<![CDATA[
						SELECT SC.* FROM secopre.STAGE_CONFIG SC WHERE id = :stageConfigId
					]]>
				</prop>
				
				
				<prop key="GET_VALID_DISTRICTS">
					<![CDATA[
						SELECT D.ID, CONCAT('DTO-',D.NUMBER) AS DESCRIPTION
							FROM secopre.DISTRICT D JOIN
							(SELECT DISTINCT(ED.DISTRICT_ID) FROM secopre.ENTRYDISTRICT ED) T
							ON (D.ID = T.DISTRICT_ID)
					]]>
				</prop>
				
				<prop key="IS_USERNAME_VALID">
					<![CDATA[
						SELECT COUNT(1) AS EXISTE
  						  FROM secopre.USER
                         WHERE USERNAME = :username
                           AND ACTIVE = 1
					]]>
				</prop>	
				
				<prop key="GET_REPORT_LIST">
					<![CDATA[
						SELECT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.USER_ROLE UR,
						  	   secopre.REPORT_SOURCE RS
						 WHERE R.ACTIVE = 1
						   AND R.PARENT_REPORT_ID IS NULL
						   AND R.ROLE_OWNER = UR.ROLE_ID
						   AND UR.USER_ID = :userId
						   AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>	
					
				<prop key="GET_REPORT_BY_ID">
					<![CDATA[
						SELECT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.REPORT_SOURCE RS
						 WHERE R.ID = :reportId
						 AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>
				
				<prop key="GET_REPORT_RESOURCE">
					<![CDATA[
						SELECT R.RESOURCE
						  FROM secopre.REPORT R
						 WHERE R.ID = :reportId
					]]>
				</prop>			
	
				<prop key="VALIDATE_ENTRIES_NEXT_YEAR">
					<![CDATA[
						SELECT 
						    COUNT(*)
						FROM
						    SECOPRE.entry E
						        INNER JOIN
						    SECOPRE.programmatic_key PK ON E.PROGRAMMATIC_ID = PK.ID
						WHERE
						    PK.YEAR = YEAR(CURDATE()) + 1
					]]>
				</prop>
		
				<prop key="CLONE_PROGRAMMATIC_KEY">
					<![CDATA[	
						INSERT INTO secopre.programmatic_key (ACTIVE, CREATE_DATE, CREATED_BY, UPDATE_DATE, UPDATED_BY, CODE, YEAR)
						SELECT ACTIVE, NOW(), :userId, NOW(), :userId, CODE, YEAR +1
						FROM secopre.programmatic_key
						WHERE YEAR = YEAR(CURDATE());					
					]]>
				</prop>		
				<prop key="CLONE_ENTRIES">
					<![CDATA[	
					
					]]>
				</prop>

				<prop key="GET_SUBREPORTS_BY_ID">
					<![CDATA[
						SELECT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.REPORT_SOURCE RS
						 WHERE R.PARENT_REPORT_ID = :reportId
						 AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>	
				
				<prop key="GET_ROLE_LIST_BY_USER">
					<![CDATA[
						SELECT ROLE_ID, ROLENAME
  						  FROM USER_ROLE ur, ROLE r
 						 WHERE ur.role_id=r.id
  						   AND USER_ID = :userId
					]]>
				</prop>	
				
				
				<prop key="GET_PERMISSION_LIST_BY_ROLE">
					<![CDATA[
							SELECT p.ID PERMISSION_ID, P.NAME NAME
							  FROM ROLE_PERMISSION rp, 
							       PERMISSION p
							 WHERE rp.permission_id = p.id
							   AND rp.role_id = :idRole
					]]>
				</prop>					
				
				<prop key="GET_ROLE_LIST_BY_MENU">
					<![CDATA[
						SELECT ROLE_ID, ROLENAME
  						  FROM MENU_ROLE mr, ROLE r
 						 WHERE mr.role_id=r.id
  						   AND MENU_ID = :idMenu
					]]>
				</prop>	
				
				<prop key="GET_REPORT_PARAMETERS">
					<![CDATA[
						SELECT RPC.REPORT_ID,
							   RPC.PARAMETER_NAME,
							   RPC.PARAMETER_PATH,
							   RPC.PARAMETER_ID,
							   RP.PARAMETER_TYPE,
							   RP.AJAX,
							   RPC.LABEL,
							   RPC.REQUIRED,
							   RPC.CREATION_DATE,
							   RPC.ACTIVE
						  FROM secopre.REPORT_PARAMETER_CONFIG RPC,
						  	   secopre.REPORT_PARAMETER RP
						 WHERE RPC.PARAMETER_ID = RP.ID
						 AND RPC.REPORT_ID = :reportId
					]]>
				</prop>
				
				<prop key="GET_CREATED_FORMALITIES_BY_USER">
					<![CDATA[
					SELECT R.FOLIO, 
						   'Creacion de Trámite' AS MOVEMENT_TYPE,
					       R.JUSTIFICATION AS JUSTIFICATION,
					       RH.COMMENTS AS COMMENTS,
					       F.DESCRIPTION AS FORMALITY,
					       RH.LAST_UPDATE CREATION_DATE,
					       (SELECT S.DESCRIPTION
					          FROM secopre.REQUEST_HISTORY IRH,
					          	   secopre.WORKFLOW_CONFIG WC,
					          	   secopre.STATUS S
					         WHERE IRH.ACTIVE = 1 
					           AND IRH.WORKFLOW_CONFIG_ID = WC.ID
					           AND WC.STATUS_ID = S.ID
					           AND IRH.REQUEST_ID = R.ID) AS CURRENT_STATUS
					  FROM secopre.REQUEST_HISTORY RH,
					  	   secopre.REQUEST R,
					  	   secopre.REQUEST_CONFIG RC,
					  	   secopre.FORMALITY F
					 WHERE RH.USER_ID = :userId
					   AND RH.CONSECUTIVE = 1
					   AND RC.REQUEST_ID = R.ID
					   AND RC.FORMALITY_ID = F.ID
					   AND RH.REQUEST_ID = R.ID
					 ORDER BY RH.LAST_UPDATE DESC
					 LIMIT :total
					]]>
				</prop>
				
				<prop key="GET_USER_MOVEMENT_ACTIONS">
					<![CDATA[
						SELECT R.FOLIO,
							   'Acción Sobre el Folio' as MOVEMENT_TYPE,
							   R.JUSTIFICATION,
							   RH.COMMENTS,
							   F.DESCRIPTION FORMALITY,
							   RH.LAST_UPDATE AS CREATION_DATE,
							   RH.REQUEST_ID, 
							   RH.CONSECUTIVE,
							   RH.LAST_UPDATE,
							   RH.WORKFLOW_CONFIG_ID, 
							   WC.WF_CFG_CODE, 
							   WC.NEXT_STAGE_CONFIG,
							   CONCAT(IFNULL ((SELECT IST.DESCRIPTION
							   	  FROM secopre.STATUS IST,
							   	  	   secopre.WORKFLOW_CONFIG IWC,
							   	  	   secopre.REQUEST_HISTORY IRH
							   	 WHERE IRH.REQUEST_ID = RH.REQUEST_ID
							   	   AND IRH.CONSECUTIVE = (RH.CONSECUTIVE - 1)
							   	   AND IRH.WORKFLOW_CONFIG_ID = IWC.ID
							   	   AND IWC.STATUS_ID = IST.ID), 'Creación del Folio'), ' > ', WC.WF_CFG_CODE, ' > ', S.DESCRIPTION) AS CURRENT_STATUS
						  FROM secopre.REQUEST_HISTORY RH,
						  	   secopre.WORKFLOW_CONFIG WC,
						  	   secopre.STAGE_CONFIG SC,
						  	   secopre.STATUS S,
						  	   secopre.REQUEST R,
						  	   secopre.FORMALITY F,
						  	   secopre.REQUEST_CONFIG RC
						 where RH.user_id = :userId 
						AND RH.WORKFLOW_CONFIG_ID = WC.ID
						AND WC.STAGE_CONFIG_ID = SC.ID
						AND WC.STATUS_ID = S.ID
						AND RH.REQUEST_ID = R.ID
						AND R.ID = RC.REQUEST_ID
						AND RC.FORMALITY_ID = F.ID
						ORDER BY RH.LAST_UPDATE DESC, RH.CONSECUTIVE DESC
						LIMIT :total
					]]>
				</prop>
				
				<prop key="GET_DISTRICT_LIST_BY_USER">
					<![CDATA[
							SELECT D.id , D.NUMBER DESCRIPCION
						  	  FROM DISTRICT D,
						  	       DISTRICT_USER DS
						  	 WHERE D.ID = DS.DISTRICT_ID
						  	   AND DS.USER_ID = :userId
					]]>
				</prop>	
				
				<prop key="GET_USER_LIST_BY_DISTRICT">
					<![CDATA[
							SELECT U.id , U.USERNAME USERNAME, U.PERSON_ID
						  	  FROM USER U,
						  	       DISTRICT_USER DU
						  	 WHERE U.ID = DU.USER_ID
						  	   AND DU.DISTRICT_ID = :districtId
					]]>
				</prop>						
			</props>				
		</property>
	</bean>
</beans>	